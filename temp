#ifndef PACKET_HPP
#define PACKET_HPP

#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <time.h>
using namespace std;
#define LEN_HEADER 4
#define MAX_LEN_BODY 512

enum PacketStatus { GENERATED, ENQUEUED, PROCESSED, UNDEFINED };
#define MAX_PACKET_PRIORRITY 10
#define NUM_PACKET_GENERATOR 100


class 
{

public:

private:
	char data_[LEN_HEADER + MAX_LEN_BODY];
	std::size_t body_length_;
}

class Packet
{
	friend ostream& operator<<(ostream& fout, const Packet& e);
    
public:
	Packet() = default;
	~Packet() = default;
	Packet(int pkt_no, int pkt_pri, int genAddr, string pktContent);
	void setPacketNo(int pktNo) { packet_no = pktNo; }
	void setPacketGenAddr(int pktGenAddr) { packet_gen_addr = pktGenAddr; }
	void setPacketHandlerAddr(int pktHndlerAddr) { packet_handler_adrr = pktHndlerAddr; }
	void setPacketPriority(int pktPrior) { packet_pri = pktPrior; }
	void setPacketStatus(PacketStatus pktStatus) { packetStatus = pktStatus; }
	void setPacketElapsedTime(double t_elapsed_ms) { t_elapsed_time_ms = t_elapsed_ms; }
	void setPacketGenTime(timespec t_gen) { t_packet_gen = t_gen; }
	void setPacketProcTime(timespec t_proc) { t_packet_proc = t_proc; }
	int getPacketPri() { return packet_pri; }
	int getPacketNo() { return packet_no; }
	const char *data() const { return data_; }
	char *data() { return data_; }
	double getPacketElapsedTime() { return t_elapsed_time_ms; }
	timespec getPacketGenTime() { return t_packet_gen; }
	timespec getPacketProcTime() { return t_packet_proc; }
	bool operator>(Packet& e) { return packet_pri > e.packet_pri; }
	bool operator<(Packet& e) { return packet_pri < e.packet_pri; }

private:
	int packet_no;
	int packet_gen_addr;
	int packet_handler_adrr;
	int packet_pri;
	char data_[LEN_HEADER + MAX_LEN_BODY];
	timespec t_packet_gen;
	timespec t_packet_proc;
	double t_elapsed_time_ms;
	PacketStatus packetStatus;
};

#endif